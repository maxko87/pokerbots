package pokerbots.utils;

public class PreflopTableGen {
	
	// card = suit<<4 | rank
	// h,c,d,s
	// Ac = 0x1c
	
	//10,000 samples
	public final static float[] preflopTable = new float[]{0.5253764f,0.28433916f,0.29394814f,0.30672628f,0.32348615f,0.33609092f,0.3625674f,0.38743803f,0.41713762f,0.4482305f,0.49109906f,0.5343127f,0.58156824f,0.28461394f,0.53162885f,0.30373013f,0.3142327f,0.33562222f,0.349099f,0.36685622f,0.39532045f,0.42567164f,0.45905334f,0.49810788f,0.5394285f,0.586244f,0.29289496f,0.30405414f,0.5409067f,0.3280103f,0.34608f,0.35940492f,0.37999701f,0.39760205f,0.43022627f,0.46760777f,0.50615823f,0.54887366f,0.5950096f,0.30834928f,0.311697f,0.32757288f,0.5535425f,0.35779116f,0.37529957f,0.3909168f,0.40912473f,0.44047332f,0.4750048f,0.5115524f,0.5533538f,0.59862995f,0.3248395f,0.33689314f,0.34322488f,0.35417026f,0.5725145f,0.3815684f,0.40096384f,0.4207643f,0.4513765f,0.48485002f,0.5200049f,0.55861443f,0.60566294f,0.3362359f,0.34698474f,0.35857406f,0.37027967f,0.378956f,0.59509015f,0.40655148f,0.4352936f,0.46115685f,0.4913266f,0.52766025f,0.5681357f,0.6122526f,0.3610104f,0.36623064f,0.37871355f,0.3917853f,0.40092826f,0.4097608f,0.6192254f,0.44227177f,0.46937144f,0.49607348f,0.53134465f,0.5717063f,0.6204037f,0.3858416f,0.39622623f,0.3995452f,0.41286093f,0.42576933f,0.4324432f,0.4435705f,0.6472053f,0.47168857f,0.5082583f,0.5369514f,0.5800307f,0.6201052f,0.4191755f,0.42866224f,0.43148178f,0.44103932f,0.4537586f,0.4610877f,0.46616724f,0.47318536f,0.67434454f,0.51222897f,0.551105f,0.59174514f,0.6329093f,0.45115453f,0.4600621f,0.46430457f,0.4725833f,0.48105863f,0.48783714f,0.49587548f,0.50437623f,0.5169482f,0.71467274f,0.5567317f,0.5961007f,0.63775986f,0.4909593f,0.49902695f,0.5054183f,0.513386f,0.519838f,0.527233f,0.53212106f,0.543675f,0.5512377f,0.554574f,0.75466895f,0.6037474f,0.64253974f,0.5330904f,0.5387578f,0.5442375f,0.5570975f,0.5624404f,0.568912f,0.5776341f,0.58190155f,0.59056187f,0.5954883f,0.5993767f,0.79680544f,0.6479159f,0.57774067f,0.58471f,0.5953276f,0.59867406f,0.60302365f,0.61419183f,0.6187499f,0.624566f,0.6329307f,0.63611346f,0.6377872f,0.6445788f,0.8397162f,0.55306804f,0.32662848f,0.3382751f,0.3528465f,0.3713779f,0.37576634f,0.406873f,0.42742413f,0.4564476f,0.4843406f,0.523522f,0.5653493f,0.60392714f,0.3284603f,0.5581702f,0.35112622f,0.3631392f,0.3762919f,0.392966f,0.4033913f,0.43461853f,0.46287513f,0.4920407f,0.52900183f,0.5685638f,0.60738754f,0.33832622f,0.3489453f,0.5714573f,0.37703618f,0.38759768f,0.4037028f,0.4211014f,0.4423223f,0.4718352f,0.5064887f,0.5398082f,0.57448983f,0.614442f,0.34998012f,0.363507f,0.3687917f,0.5787168f,0.39947912f,0.41319668f,0.4285429f,0.45572838f,0.4730551f,0.5064136f,0.54516757f,0.582264f,0.62409985f,0.36497602f,0.3772347f,0.3891473f,0.4009144f,0.5974078f,0.42008293f,0.44088662f,0.4636327f,0.48296267f,0.5113014f,0.55191195f,0.5909095f,0.62786645f,0.3803902f,0.39175522f,0.40001315f,0.40961498f,0.42183343f,0.61790323f,0.45014971f,0.4696771f,0.49200583f,0.522377f,0.5546402f,0.5945416f,0.6372653f,0.4044638f,0.41293448f,0.4237227f,0.4290298f,0.4363522f,0.44595957f,0.6400589f,0.47790205f,0.5024959f,0.52942693f,0.5627342f,0.59685403f,0.6442524f,0.422565f,0.4330379f,0.44096553f,0.452203f,0.4611096f,0.4686439f,0.4750446f,0.6649366f,0.5117262f,0.5400329f,0.5698725f,0.6086301f,0.645714f,0.4558453f,0.4647102f,0.47100246f,0.48028523f,0.4830128f,0.4918072f,0.5031358f,0.50938356f,0.6903968f,0.55084574f,0.5807319f,0.6203179f,0.6552205f,0.4851028f,0.4967466f,0.5019141f,0.5103546f,0.5167472f,0.5235436f,0.534027f,0.5425663f,0.545812f,0.7289918f,0.5844897f,0.6174177f,0.6587135f,0.5217861f,0.5283149f,0.5359881f,0.5403068f,0.5512116f,0.5508543f,0.56305003f,0.57108855f,0.57439625f,0.58392453f,0.7681329f,0.6200724f,0.66333914f,0.5572191f,0.570334f,0.5765039f,0.57763004f,0.5902661f,0.5908421f,0.6013659f,0.6094367f,0.6146096f,0.6170777f,0.623729f,0.8100626f,0.6683588f,0.5997407f,0.61406124f,0.6186707f,0.61848235f,0.6324674f,0.6299741f,0.64486516f,0.6427463f,0.6549783f,0.6577964f,0.6606699f,0.66713333f,0.8463104f};

	public static void main( String[] args ) {
		
		float[] table = new float[13*13*2];
		
		//Compute all win rates given any two cards pre-flop
		for ( int rank1 = 0; rank1 < 13; rank1++ ) {
			System.out.println( rank1*100/13 + "% done" );
			for ( int rank2 = 0; rank2 < 13; rank2++ ) {
				for ( int suit1 = 0; suit1 < 4; suit1++ ) {
					for ( int suit2 = 0; suit2 < 4; suit2++ ) {
					
						int card1 = (suit1<<4) | rank1;
						int card2 = (suit2<<4) | rank2;
						
						float[] rates = StochasticSimulator.computeRates(
								new int[]{
										card1,
										card2
								},
								new int[]{
								},
								10);
						
						int suited = 0;
						if ( suit1==suit2 )
							suited=1;
						int tableAddr = (suited*13*13) + (rank2*13) + (rank1);
						float winRate = table[tableAddr];
						if ( winRate==0 )
							winRate = rates[10];
						else
							winRate = winRate*0.7f + rates[10]*0.3f;
						table[tableAddr] = winRate;
					}
				}
			}
		}
		
		//Generate a Java float[] of the table
		String ret = "float[] preflopTable = new float[]{";
		for ( int i = 0; i < table.length; i++ ) {
			ret += table[i]+"f";
			if ( i< table.length-1 )
				ret+=",";
		}
		ret += "};";
		System.out.println( ret );
		
		System.out.println( getPreflopWinRate(0x1a,0x2a) );
	}
	
	public static float getPreflopWinRate( int card1, int card2 ) {
		int suited = 0;
		if ( card1>>4 == card2>>4 )
			suited = 1;
		int rank1 = card1&0xf;
		int rank2 = card2&0xf;
		float[] rates = new float[11];
		return preflopTable[(suited*13*13) + (rank2*13) + (rank1)];
	}
	
	public static float[] getPreflopWinRates( int card1, int card2 ) {
		int suited = 0;
		if ( card1>>4 == card2>>4 )
			suited = 1;
		int rank1 = card1&0xf;
		int rank2 = card2&0xf;
		float[] rates = new float[11];
		rates[10] = preflopTable[(suited*13*13) + (rank2*13) + (rank1)];
		return rates;
	}
}
